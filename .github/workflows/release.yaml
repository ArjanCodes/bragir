name: release

on:
  push:
    tags:
      - "*-release"

jobs:
  extract_tag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.versioning.outputs.tag }}
    steps:
      - uses: actions/checkout@v2
      - name: Extract tag
        id: versioning
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            echo "::set-output name=tag::$TAG_NAME"
            echo "Tag name is $TAG_NAME"
          else
            echo "No tag found"
            exit 1
          fi

  setup_and_build:
    needs: extract_tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -

      - name: Get Information About Package
        id: details
        run: |
          package_information=$(poetry version)
          name=$(echo $package_information | awk '{print $1}')
          new_version=$(echo ${{ needs.extract_tag.outputs.tag }} | awk -F'-' '{print $1}' | awk -F'v' '{print $2}')
          echo "Package name: $name"
          echo "New version: $new_version"
          echo "::set-output name=name::$name"
          echo "::set-output name=new_version::$new_version"

      - name: Fetch information from PyPI
        id: fetch-info
        run: |
          PACKAGE_NAME=${{ steps.details.outputs.name }}
          response=$(curl -s https://pypi.org/pypi/$PACKAGE_NAME/json)
          latest_version=$(echo $response | grep -oP '"releases":\{"\K[^"]+' | sort -rV | head -n 1)
          echo "Latest version on PyPI: $latest_version"
          echo "::set-output name=latest_version::$latest_version"

      - name: Compare versions and exit if not newer
        run: |
          NEW_VERSION=${{ steps.details.outputs.new_version }}
          LATEST_VERSION=${{ steps.fetch-info.outputs.latest_version }}

          if [ "$(printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" | sort -rV | head -n 1)" != "$NEW_VERSION" ] || [ "$NEW_VERSION" == "$LATEST_VERSION" ]; then
            echo "The new version $NEW_VERSION is not greater than the latest version $LATEST_VERSION on PyPI."
            exit 1
          else
            echo "The new version $NEW_VERSION is greater than the latest version $LATEST_VERSION on PyPI."
          fi

      - name: Set project version with Poetry
        run: |
          NEW_VERSION=${{ steps.details.outputs.new_version }}
          poetry version $NEW_VERSION

      - name: Install dependencies
        run: poetry install --sync --no-interaction

      - name: Build source and wheel distribution
        run: |
          poetry build

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  update_changelog:
    needs: [setup_and_build, extract_tag]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Update CHANGELOG
        id: changelog
        uses: requarks/changelog-action@v1
        with:
          token: ${{ github.token }}
          tag: ${{ needs.extract_tag.outputs.tag }}
          excludeTypes: doc, style, test, refactor, ci, other

      - name: Commit CHANGELOG.md
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          branch: main
          commit_message: "docs: update CHANGELOG.md for ${{ needs.extract_tag.outputs.tag }} [skip ci]"
          file_pattern: CHANGELOG.md

  pypi_publish:
    name: Upload release to PyPI
    needs: [setup_and_build, extract_tag]
    runs-on: ubuntu-latest
    environment:
      name: pypi
    permissions:
      id-token: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  # github_release:
  #   name: Create GitHub Release
  #   needs: [setup_and_build, extract_tag]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: dist
  #         path: dist/

  #     - name: Create GitHub Release
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
  #       with:
  #         tag_name: ${{ needs.extract_tag.outputs.tag }}
  #         release_name: ${{ needs.extract_tag.outputs.tag }}
  #         body: "Release of version ${{ needs.extract_tag.outputs.tag }}"
  #         draft: false
  #         prerelease: false

  #     - name: Upload release assets
  #       uses: actions/upload-release-asset@v1
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: dist/*
  #         asset_name: $(basename $asset_path)
  #         asset_content_type: application/octet-stream
